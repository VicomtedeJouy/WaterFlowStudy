import math

import Rhino
import rhinoscriptsyntax as rs
from Rhino import Geometry as g
import Rhino.Geometry.Collections as c
import Rhino.Geometry.Intersect.Intersection as s


# OBJECT : waterdrop
class RainDrop(object):
    def __init__(self, point3d, mat, facadeMesh, windvect, stepsize, maxsteps, plane):
        self.pos = point3d   # position of the flow
        self.mesh = facadeMesh  # surface mesh of the facade
        self.mpos = self.mesh.ClosestMeshPoint(self.pos, 0.)   # mesh position of the flow
        self.wind = windvect    # vector representing the wind force
        self.antol = mat[0]   # tolerance angle
        self.androp = mat[1] # drop angle
        self.stepsize = stepsize    # interval of steps on the mesh
        self.points = [self.pos]  # flow points history
        self.curveTemp = [self.pos]  # stock a journey on a srf, then back to 0 when changes
        self.waterPath = [] # gets the different curves of a water path
        self.state = 'on'   # if the flow is on or off the facade or finished
        self.maxsteps = maxsteps    # max numbers of iterations
        self.check = False  # True if the flow has to be checked, false otherwise
        self.plane = plane  # plane that define the ground

    def nextStep(self):
        newPlane = rs.PlaneFromNormal(self.pos, self.mesh.NormalAt(self.mpos))
        # create a vector from newFrame XAxis
        downVect = newPlane.XAxis
        downVect.Unitize()
        # figure out how much to rotate it.
        deltaAngle = g.Vector3d.VectorAngle( downVect, g.Vector3d(0.0, 0.0, -1.0), newPlane )
        # rotate it in the plane
        downVect.Rotate( deltaAngle, newPlane.ZAxis)
        # set the length
        downVect = rs.VectorScale(downVect, self.stepsize)
        spacePoint = g.Point3d.Add(self.pos, downVect)
        # find next point
        newPoint = self.mesh.ClosestPoint(spacePoint)
        self.updatePos(newPoint)

    def nextSurf(self):
        # find the next intersection with the mesh
        self.pos = g.Point3d.Add(self.pos, g.Vector3d(0., 0., -self.stepsize/10))
        ray = g.Ray3d(self.pos, g.Vector3d(0., 0., -1.))
        num = s.MeshRay(self.mesh, ray)
        if num > 0: # if it does not exists
            self.nextCrv()
            newPoint = ray.PointAt(num)
            #self.waterPath.append(g.Line(self.pos, newPoint))  # this line can be unhashtagged if we want to follow the water path off the facade
            self.updatePos(newPoint)
            self.state = 'on'   # the waterflow is on the facade again
        else:
            self.finish()
            #self.pos.Transform(g.Transform.PlanarProjection(self.plane))   # these lines can be unhashtagged if we want to display the path of the water to the ground
            #self.points.append(self.pos)

    def nextCrv(self):
        # separates the curves after a 'srf to srf' journey
        self.waterPath.append(g.PolylineCurve(self.curveTemp))
        self.curveTemp = []
        
    def finish(self):
        # finish the water path
        self.waterPath.append(g.PolylineCurve(self.curveTemp))
        self.state = 'finished'

    def updatePos(self, newPoint):
        # change flow position to the new point
        self.points.append(newPoint)
        self.curveTemp.append(newPoint)
        self.pos = newPoint
        self.mpos = self.mesh.ClosestMeshPoint(self.pos, 0.)
            
    def toldrop(self):
        # check angle tolereances 
        vect1 = rs.VectorCreate(self.points[-2], self.points[-3])
        vect2 = rs.VectorCreate(self.points[-1], self.points[-2])
        norm = self.mesh.NormalAt(self.mpos)
        alpha = g.Vector3d.VectorAngle(vect1, vect2)
        if alpha > self.antol and norm.Z < 0 :  # if the angle between 2 moves larger than tolerance
            self.state = 'off'  # the waterflow is off the facade
            edgePoints.append(self.pos)
        alpha = g.Vector3d.VectorAngle(vect2, g.Vector3d(0., 0., -1.))
        if alpha > (math.pi/2-self.androp) and norm.Z < 0 : # if the geometry is too steep
            self.state = 'off'  # the waterflow is off the facade
            
    def accumulation(self):
        # check accumulation conditions (distance, height and stepsize (in order))
        if self.points[-1].DistanceTo(self.points[-3]) < self.points[-1].DistanceTo(self.points[-2]) or self.points[-1].Z > self.points[-2].Z or self.points[-1].DistanceTo(self.points[-2]) < self.stepsize/20.:
            if self.isInBassin():
                self.finish()
                criticalPoints.append(self.pos)
            elif self.isOnEdge():
                self.state = 'off'
                edgePoints.append(self.pos)
                
    def isInBassin(self):
        # bool for bassin loaction according to different conditions
        norm1 = rs.VectorUnitize(self.mesh.NormalAt(self.mpos))
        if norm1.Z > 0.95:
            return True
        norm0 = rs.VectorUnitize(self.mesh.NormalAt(self.mesh.ClosestMeshPoint(self.points[-2], 0.)))
        if norm0 != norm1 and norm0.Z > 0. and norm1.Z > 0.:
            return True
        return False
        
    def isOnEdge(self):
        # bool for bassin loaction according to different conditions
        norm2 = rs.VectorUnitize(self.mesh.NormalAt(self.mpos))
        norm1 = rs.VectorUnitize(self.mesh.NormalAt(self.mesh.ClosestMeshPoint(self.points[-2], 0.)))
        norm0 = rs.VectorUnitize(self.mesh.NormalAt(self.mesh.ClosestMeshPoint(self.points[-3], 0.)))
        if self.points[-3].DistanceTo(self.points[-1]) < self.stepsize/20. and norm2 == norm1 and norm0 == norm1 and norm0.Z > 0:
            return True
        if norm1 != norm2 and norm2.Z < 0.:
            return True
        return False



def main(startPoint, facadeMesh, windVect, stepSize, maxSteps, endPlane):
    # does the rain line touch the facade?
    ray = g.Ray3d(startPoint, windVect)
    num = s.MeshRay(facadeMesh, ray)
    if num <= 0:    # the rainLine does not touch the facade
        return [], [], []
    startPointDrop = ray.PointAt(num)    # impact point
    
    # creation and initialization of the RainDrop OBJECT
    drop = RainDrop(startPointDrop, mat, facadeMesh, windVect, stepSize, maxSteps, endPlane)
    i = 0
    
    # loop that draw the water path
    while drop.state != 'finished' and i < drop.maxsteps:
        i += 1
        if i > 5:
            drop.check = True   # begin to check
        if drop.check == True:  # check falling and accumulation conditions
            drop.accumulation()
            drop.toldrop()
        if drop.state == 'on':  # if the waterflow is on the facade
            drop.nextStep()
        if drop.state == 'off': # if the waterflow is off the facade (did not used if self.check == 'off' to gain a test)
            drop.check = False  # stop checking until it reaches the facade again
            drop.nextSurf()
            i = 0   # re initialisation of the count to be sure that it is not overtaken
    
    # creation of the curves
    curves = []
    for cu in drop.waterPath:
        curves.append(cu)
    if len(drop.waterPath) == 0:
        print 'missed'
    return curves, startPointDrop, g.Line(startPoint, startPointDrop)



fCrvs = []
impactPoints = []
rainLines = []
criticalPoints = []
edgePoints = []

global criticalPoints
global edgePoints


for pt in startPoint:
    temp, imPt, rLines = main(pt, facadeMesh, windVect, stepSize, maxSteps, endPlane)
    
    if len(temp) != 0:
        for cu in temp:
            fCrvs.append(cu)
        impactPoints.append(imPt)
        rainLines.append(rLines)
