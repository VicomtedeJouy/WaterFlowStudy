import math

import Rhino
import rhinoscriptsyntax as rs
from Rhino import Geometry as g
import Rhino.Geometry.Collections as c
import Rhino.Geometry.Intersect.Intersection as s


# OBJECT : waterdrop
class RainDrop(object):
    def __init__(self, point3d, mat, facadeMesh, windvect, stepsize, maxsteps, plane):
        self.pos = point3d   # position of the flow
        self.mesh = facadeMesh  # surface mesh of the facade
        self.mpos = self.mesh.ClosestMeshPoint(self.pos, 0.)   # mesh position of the flow
        self.wind = windvect    # vector representing the wind force
        self.antol = mat[0]   # tolerance angle
        self.androp = mat[1] # drop angle
        self.stepsize = stepsize    # interval of steps on the mesh
        self.points = [self.pos]  # flow points history
        self.curveTemp = [self.pos]  # stock a journey on a srf, then back to 0 when changes
        self.waterPath = [] # gets the different curves of a water path
        self.state = 'on'   # if the flow is on or off the facade or finished
        self.criticalPoint = None   # if the water drop is stuck in a bassin, it will return the spot
        self.maxsteps = maxsteps    # max numbers of iterations
        self.check = False  # True if the flow has to be checked, false otherwise
        self.plane = plane  # plane that define the ground

    def nextStep(self):
        newPlane = rs.PlaneFromNormal(self.pos, self.mesh.NormalAt(self.mpos))
        # create a vector from newFrame XAxis
        downVect = newPlane.XAxis
        # figure out how much to rotate it.
        deltaAngle = g.Vector3d.VectorAngle( downVect, g.Vector3d(0.0, 0.0, -1.0), newPlane )
        # rotate it in the plane
        downVect.Rotate( deltaAngle, newPlane.ZAxis)
        # set the length
        downVect = rs.VectorScale(downVect, self.stepsize)
        spacePoint = g.Point3d.Add(self.pos, downVect)
        # find next point
        newPoint = self.mesh.ClosestPoint(spacePoint)

        if newPoint.Z > self.pos.Z: # if higher
            self.state = 'off'
            print 'happened'
            self.nextSurf()
        if newPoint.DistanceTo(self.pos) < self.stepsize: # if too close
            self.accumulation()
        else:
            self.updatePos(newPoint)

    def nextSurf(self):
        # find the next intersection with the mesh
        self.pos = g.Point3d.Add(self.pos, g.Vector3d(0., 0., -1.) * self.stepsize/10)
        ray = g.Ray3d(self.pos, g.Vector3d(0., 0., -1.))
        num = s.MeshRay(self.mesh, ray)
        if num > 0: # if it does not exists
            self.nextCrv()
            newPoint = ray.PointAt(num)
            #self.waterPath.append(g.Line(self.pos, newPoint))  # this line can be unchecked if we want to follow the water path off the facade
            self.updatePos(newPoint)
            self.state = 'on'   # the waterflow is on the facade again
        else:
            self.nextCrv()
            #self.pos.Transform(g.Transform.PlanarProjection(self.plane))
            #self.points.append(self.pos)
            self.state = 'finished' # the waterflow has ended its path

    def nextCrv(self):
        # separates the curves after a 'srf to srf' journey
        self.waterPath.append(g.PolylineCurve(self.curveTemp))
        self.curveTemp = []

    def updatePos(self, newPoint):
        #   change flow position to the new point
        self.points.append(newPoint)
        self.curveTemp.append(newPoint)
        self.pos = newPoint
        self.mpos = self.mesh.ClosestMeshPoint(self.pos, 0.)
        
    def tol(self):
        #   tolerance angle check function
        vect1 = rs.VectorCreate(self.points[-2], self.points[-3])
        vect2 = rs.VectorCreate(self.points[-1], self.points[-2])
        norm = self.mesh.NormalAt(self.mpos)
        alpha = g.Vector3d.VectorAngle(vect1, vect2)
        if alpha > self.antol and rs.VectorDotProduct(norm, g.Vector3d(0., 0., 1.)) < 0 :  # if the angle between 2 moves larger than tolerance
            self.state = 'off'  # the waterflow is off the facade
        
    def drop(self):
        #   drop angle check function
        move = rs.VectorCreate(self.points[-1], self.points[-2])
        alpha = g.Vector3d.VectorAngle(move, g.Vector3d(0., 0., -1.))
        norm = self.mesh.NormalAt(self.mpos)
        if alpha > (math.pi/2-self.androp) and rs.VectorDotProduct(norm, g.Vector3d(0., 0., 1.)) < 0 : # if the geometry is too steep
            self.state = 'off'  # the waterflow is off the facade
            
    def toldrop(self):
        vect1 = rs.VectorCreate(self.points[-2], self.points[-3])
        vect2 = rs.VectorCreate(self.points[-1], self.points[-2])
        norm = self.mesh.NormalAt(self.mpos)
        alpha = g.Vector3d.VectorAngle(vect1, vect2)
        if alpha > self.antol and rs.VectorDotProduct(norm, g.Vector3d(0., 0., 1.)) < 0 :  # if the angle between 2 moves larger than tolerance
            self.state = 'off'  # the waterflow is off the facade
        alpha = g.Vector3d.VectorAngle(vect2, g.Vector3d(0., 0., -1.))
        if alpha > (math.pi/2-self.androp) and rs.VectorDotProduct(norm, g.Vector3d(0., 0., 1.)) < 0 : # if the geometry is too steep
            self.state = 'off'  # the waterflow is off the facade
            
    def accumulation(self):
        # verify which case : stuck on an edge or in a bassin
        normal = self.mesh.NormalAt(self.mpos)
        if rs.VectorDotProduct(normal, g.Vector3d(0., 0., -1.)) > 0:    # the water drop is on an edge
            self.state = 'off'
            self.nextSurf()
        elif:
            self.state = 'finished'
            self.criticalPoint = self.pos




def main(startPoint, facadeMesh, windVect, stepSize, maxSteps, endPlane):
    # does the rain line touch the facade?
    ray = g.Ray3d(startPoint, windVect)
    num = s.MeshRay(facadeMesh, ray)
    if num <= 0:    # the rainLine does not touch the facade
        return [], [], []
    startPointDrop = ray.PointAt(num)    # impact point
    
    # creation and initialization of the RainDrop OBJECT
    drop = RainDrop(startPointDrop, mat, facadeMesh, windVect, stepSize, maxSteps, endPlane)
    i = 0
    
    # loop that draw the water path
    while drop.state != 'finished' and i < drop.maxsteps:
        i += 1
        if i > 4:
            drop.check = True   # begin to check
        if drop.check == True:  # check falling conditions
            drop.toldrop()
        if drop.state == 'on':  # if the waterflow is on the facade
            drop.nextStep()
        elif drop.state == 'off': # if the waterflow is off the facade (did not used if self.check == 'off' to gain a test)
            drop.check = False  # stop checking until it reaches the facade again
            drop.nextSurf()
            i = 0   # re initialisation of the count to be sure that it is not overtaken
    # creation of the curves
    curves = []
    for cu in drop.waterPath:
        curves.append(cu)
    return curves, startPointDrop, g.Line(startPoint, startPointDrop), self.criticalPoint



fCrvs = []
impactPoints = []
rainLines = []
criticalPoints = []

for pt in startPoint:
    temp, imPt, rLines, critic = main(pt, facadeMesh, windVect, stepSize, maxSteps, endPlane)
    if len(temp) != 0:
        for cu in temp:
            fCrvs.append(cu)
        impactPoints.append(imPt)
        rainLines.append(rLines)
        criticalPoints.append(critic)
