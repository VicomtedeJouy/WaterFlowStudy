import math

import Rhino
import rhinoscriptsyntax as rs
from Rhino import Geometry as g
import Rhino.Geometry.Collections as c
import Rhino.Geometry.Intersect.Intersection as s
    
class RainDrop(object):
    def __init__(self, point3d, mesh, windvect, angletol, angledrop, stepsize, maxsteps, plane):
        self.start = point3d
        self.pos = self.start   # position of the flow
        self.mpos = mesh.ClosestMeshPoint(self.pos, 0.)   # mesh position of the flow
        self.mesh = mesh    # surface mesh of the facade
        self.wind = windvect
        self.antol = math.pi/180*angletol   # tolerance angle
        self.androp = math.pi/180*angledrop # drop angle
        self.stepsize = stepsize    # interval of steps on the mesh
        self.points = [self.start]  # flow points history
        self.curveTemp = [self.start]  # stock a journey on a srf, then back to 0 when changes
        self.waterPath = [] # gets the different curves of a water path
        self.state = 'on'   # if the flow is on or off the facade or finished
        self.maxsteps = maxsteps    # max numbers of iterations
        self.check = False  # True if the flow has to be checked, false otherwise
        self.plane = plane  # plane that define the ground

    def nextStep(self):
        newPlane = rs.PlaneFromNormal(self.pos, self.mesh.NormalAt(self.mpos))
        # create a vector from newFrame XAxis
        downVect = newPlane.XAxis
        # figure out how much to rotate it.
        deltaAngle = g.Vector3d.VectorAngle( downVect, g.Vector3d(0.0, 0.0, -1.0), newPlane )
        # rotate it in the plane
        downVect.Rotate( deltaAngle, newPlane.ZAxis)
        # set the length
        downVect = rs.VectorScale(downVect, self.stepsize)
        spacePoint = g.Point3d.Add(self.pos, downVect)
        # find next point
        newPoint = self.mesh.ClosestPoint(spacePoint)

        if newPoint.Z >= self.pos.Z: # if higher
            self.state = 'finished'
        #elif self.checkTolerance(newPoint) == True: # if too close
        #    self.state = 'finished'
        else:
            self.updatePos( newPoint )

    def nextSurf(self):
        # find the next intersection with the mesh
        self.pos = g.Point3d.Add(self.pos, g.Vector3d(0., 0., -1.) * self.stepsize/10)
        ray = g.Ray3d(self.pos, g.Vector3d(0., 0., -1.))
        num = s.MeshRay(self.mesh, ray)
        if num > 0: # if it exists
            self.nextCrv()
            newPoint = ray.PointAt(num)
            self.updatePos(newPoint)
            self.state = 'on'   # the waterflow is on the facade again
        else :  # if not
            self.nextCrv()
            #self.pos.Transform(g.Transform.PlanarProjection(self.plane))
            #self.points.append(self.pos)
            self.state = 'finished' # the waterflow has ended its path

    def nextCrv(self):
        # separates the curves after a 'srf to srf' journey
        self.waterPath.append(g.PolylineCurve(self.curveTemp))
        self.curveTemp = []

    def updatePos(self, newPoint):
        #   change flow position to the new point
        self.points.append(newPoint)
        self.curveTemp.append(newPoint)
        self.pos = newPoint
        self.mpos = self.mesh.ClosestMeshPoint(self.pos, self.stepsize)
        
    def tol(self):
        #   tolerance angle check function
        vect1 = rs.VectorCreate(self.points[-2], self.points[-3])
        vect2 = rs.VectorCreate(self.points[-1], self.points[-2])
        norm = self.mesh.NormalAt(self.mpos)
        alpha = g.Vector3d.VectorAngle(vect1, vect2)
        if alpha > self.antol and rs.VectorDotProduct(norm, g.Vector3d(0., 0., 1.)) < 0 :  # if the angle between 2 moves larger than tolerance
            self.state = 'off'  # the waterflow is off the facade
        
    def drop(self):
        #   drop angle check function
        move = rs.VectorCreate(self.points[-1], self.points[-2])
        alpha = g.Vector3d.VectorAngle(move, g.Vector3d(0., 0., -1.))
        norm = self.mesh.NormalAt(self.mpos)
        if alpha > (math.pi/2-self.androp) and rs.VectorDotProduct(norm, g.Vector3d(0., 0., 1.)) < 0 : # if the geometry is too steep
            self.state = 'off'  # the waterflow is off the facade
            
    def toldrop(self):
        vect1 = rs.VectorCreate(self.points[-2], self.points[-3])
        vect2 = rs.VectorCreate(self.points[-1], self.points[-2])
        norm = self.mesh.NormalAt(self.mpos)
        alpha = g.Vector3d.VectorAngle(vect1, vect2)
        if alpha > self.antol and rs.VectorDotProduct(norm, g.Vector3d(0., 0., 1.)) < 0 :  # if the angle between 2 moves larger than tolerance
            self.state = 'off'  # the waterflow is off the facade
        alpha = g.Vector3d.VectorAngle(vect2, g.Vector3d(0., 0., -1.))
        if alpha > (math.pi/2-self.androp) and rs.VectorDotProduct(norm, g.Vector3d(0., 0., 1.)) < 0 : # if the geometry is too steep
            self.state = 'off'  # the waterflow is off the facade



def main(self):
    i = 0
    while self.state != 'finished' and i < self.maxsteps:
        i += 1
        if i > 6:
            self.check = True
        if self.check == True:
            # check both (not to define twice same objects)
            self.toldrop()
        if self.state == 'on':  # if the waterflow is on the facade
            self.nextStep()
        else: # if the waterflow is off the facade (did not used if self.check == 'off' to gain a test)
            self.check = False  # stop checking until it reaches the facade again
            self.nextSurf()
            i = 0   # re initialisation of the count to be sure that it is not overtaken
    # creation of the curves
    curves = []
    for cu in self.waterPath:
        curves.append(cu)
    return curves, self.points

def closest(pt, listPt):
    d = pt.DistanceTo(listPt[0])
    ind = 0
    for i in range(1, len(listPt)):
        dd = pt.DistanceTo(listPt[i])
        if dd < d:
            d = dd
            ind = i
    return(ind)


b = RainDrop(startPoint, facadeMesh, windVect, angleTol, angleDrop, stepSize, maxSteps, endPlane)
a, points = main(b)
